apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-kapt'

apply plugin: 'kotlin-android-extensions'

apply from: '../config/quality/quality.gradle' // pmd, checkstyle, findbugs, lint

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.25.3'
    }
}

apply plugin: 'io.fabric'

repositories {
    maven {
        url 'https://maven.fabric.io/public'
    }
}
android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.gershad.gershad"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 3006
        versionName "3.0.4"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
        }

        release {
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "gershad.apk"
                }
            }
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    signingConfigs {
        debug {
            storeFile rootProject.file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    lintOptions {
        abortOnError true
    }
    checkstyle {
        configFile = file("${project.rootDir}/config/quality/checkstyle/checkstyle.xml")
        toolVersion = '7.0'
    }
}

task versionTxt()  {
    doLast {
        new File("$projectDir/build/outputs/apk/release/version.txt").text = "$project.android.defaultConfig.versionCode"
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    def multiDexVersion = '1.0.3'
    implementation "com.android.support:multidex:$multiDexVersion"

    def playServicesVersion = '15.0.1'
    implementation "com.google.android.gms:play-services-maps:$playServicesVersion"
    implementation "com.google.android.gms:play-services-places:$playServicesVersion"
    implementation "com.google.android.gms:play-services-location:$playServicesVersion"

    def supportLibVersion = '27.1.1'
    implementation "com.android.support:cardview-v7:$supportLibVersion"
    implementation "com.android.support:support-vector-drawable:$supportLibVersion"
    implementation "com.android.support:design:$supportLibVersion"
    androidTestImplementation "com.android.support:support-annotations:$supportLibVersion"


    def jUnitVersion = '4.12'
    testImplementation "junit:junit:$jUnitVersion"

    def testRunnerVersion = '1.0.0'
    androidTestImplementation "com.android.support.test:runner:$testRunnerVersion"

    def testRulesVersion = '1.0.0'
    androidTestImplementation "com.android.support.test:rules:$testRulesVersion"


    def espressoVersion = '3.0.1'
    androidTestImplementation("com.android.support.test.espresso:espresso-core:$espressoVersion", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestImplementation("com.android.support.test.espresso:espresso-contrib:$espressoVersion") {
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'support-v7'
        exclude group: 'com.android.support', module: 'design'
        exclude module: 'support-annotations'
        exclude module: 'recyclerview-v7'
    }

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$rootProject.ext.kotlin_version"

    def constraintVersion = '1.1.2'
    implementation "com.android.support.constraint:constraint-layout:$constraintVersion"

    // Rx
    def rxAndroidVersion = '2.0.1'
    implementation "io.reactivex.rxjava2:rxandroid:$rxAndroidVersion"

    def rxJavaVersion = '2.1.10'
    implementation "io.reactivex.rxjava2:rxjava:$rxJavaVersion"

    // Maps
    def mapsVersion = '0.5'
    implementation "com.google.maps.android:android-maps-utils:$mapsVersion"

    // DI
    def kapsuleVersion = '0.3'
    implementation "space.traversal.kapsule:kapsule-core:$kapsuleVersion"

    // Retrofit
    def retrofitVersion = '2.3.0'
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"

    def okHttpVersion = '3.9.1'
    implementation "com.squareup.okhttp3:logging-interceptor:$okHttpVersion"

    // Cognito
    def awsSdkVersion = '2.6.4'
    implementation "com.amazonaws:aws-android-sdk-core:$awsSdkVersion"
    implementation "com.amazonaws:aws-android-sdk-s3:$awsSdkVersion"
    implementation "com.amazonaws:aws-android-sdk-sns:$awsSdkVersion"

    def firebaseVersion = '15.0.2'
    implementation "com.google.firebase:firebase-core:$firebaseVersion"
    implementation "com.google.firebase:firebase-messaging:$firebaseVersion"


    implementation('com.crashlytics.sdk.android:crashlytics:2.9.1@aar') {
        transitive = true
    }

    def parcelarVersion = '1.1.9'
    implementation "org.parceler:parceler-api:$parcelarVersion"
    kapt "org.parceler:parceler:$parcelarVersion"

    implementation project(':ca.psiphon')

    def calligraphyVersion = '2.3.0'
    implementation "uk.co.chrisjenx:calligraphy:$calligraphyVersion"

    def workVersion = "1.0.0-alpha05"
    implementation "android.arch.work:work-runtime-ktx:$workVersion"
}
apply plugin: 'com.google.gms.google-services'